// Code generated by mockery v2.51.1. DO NOT EDIT.

package jobmanager

import (
	gocron "github.com/go-co-op/gocron/v2"
	mock "github.com/stretchr/testify/mock"
)

// MocktaskCreater is an autogenerated mock type for the taskCreater type
type MocktaskCreater struct {
	mock.Mock
}

type MocktaskCreater_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktaskCreater) EXPECT() *MocktaskCreater_Expecter {
	return &MocktaskCreater_Expecter{mock: &_m.Mock}
}

// NewJob provides a mock function with given fields: jobDefinition, task, options
func (_m *MocktaskCreater) NewJob(jobDefinition gocron.JobDefinition, task gocron.Task, options ...gocron.JobOption) (gocron.Job, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, jobDefinition, task)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewJob")
	}

	var r0 gocron.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(gocron.JobDefinition, gocron.Task, ...gocron.JobOption) (gocron.Job, error)); ok {
		return rf(jobDefinition, task, options...)
	}
	if rf, ok := ret.Get(0).(func(gocron.JobDefinition, gocron.Task, ...gocron.JobOption) gocron.Job); ok {
		r0 = rf(jobDefinition, task, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gocron.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(gocron.JobDefinition, gocron.Task, ...gocron.JobOption) error); ok {
		r1 = rf(jobDefinition, task, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocktaskCreater_NewJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewJob'
type MocktaskCreater_NewJob_Call struct {
	*mock.Call
}

// NewJob is a helper method to define mock.On call
//   - jobDefinition gocron.JobDefinition
//   - task gocron.Task
//   - options ...gocron.JobOption
func (_e *MocktaskCreater_Expecter) NewJob(jobDefinition interface{}, task interface{}, options ...interface{}) *MocktaskCreater_NewJob_Call {
	return &MocktaskCreater_NewJob_Call{Call: _e.mock.On("NewJob",
		append([]interface{}{jobDefinition, task}, options...)...)}
}

func (_c *MocktaskCreater_NewJob_Call) Run(run func(jobDefinition gocron.JobDefinition, task gocron.Task, options ...gocron.JobOption)) *MocktaskCreater_NewJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gocron.JobOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gocron.JobOption)
			}
		}
		run(args[0].(gocron.JobDefinition), args[1].(gocron.Task), variadicArgs...)
	})
	return _c
}

func (_c *MocktaskCreater_NewJob_Call) Return(_a0 gocron.Job, _a1 error) *MocktaskCreater_NewJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocktaskCreater_NewJob_Call) RunAndReturn(run func(gocron.JobDefinition, gocron.Task, ...gocron.JobOption) (gocron.Job, error)) *MocktaskCreater_NewJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocktaskCreater creates a new instance of MocktaskCreater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktaskCreater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktaskCreater {
	mock := &MocktaskCreater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
