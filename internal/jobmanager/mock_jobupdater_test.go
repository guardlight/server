// Code generated by mockery v2.51.1. DO NOT EDIT.

package jobmanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockJobUpdater is an autogenerated mock type for the JobUpdater type
type MockJobUpdater struct {
	mock.Mock
}

type MockJobUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobUpdater) EXPECT() *MockJobUpdater_Expecter {
	return &MockJobUpdater_Expecter{mock: &_m.Mock}
}

// UpdateJobStatus provides a mock function with given fields: id, s, sd, rc
func (_m *MockJobUpdater) UpdateJobStatus(id uuid.UUID, s JobStatus, sd string, rc int) error {
	ret := _m.Called(id, s, sd, rc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, JobStatus, string, int) error); ok {
		r0 = rf(id, s, sd, rc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobUpdater_UpdateJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobStatus'
type MockJobUpdater_UpdateJobStatus_Call struct {
	*mock.Call
}

// UpdateJobStatus is a helper method to define mock.On call
//   - id uuid.UUID
//   - s JobStatus
//   - sd string
//   - rc int
func (_e *MockJobUpdater_Expecter) UpdateJobStatus(id interface{}, s interface{}, sd interface{}, rc interface{}) *MockJobUpdater_UpdateJobStatus_Call {
	return &MockJobUpdater_UpdateJobStatus_Call{Call: _e.mock.On("UpdateJobStatus", id, s, sd, rc)}
}

func (_c *MockJobUpdater_UpdateJobStatus_Call) Run(run func(id uuid.UUID, s JobStatus, sd string, rc int)) *MockJobUpdater_UpdateJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(JobStatus), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockJobUpdater_UpdateJobStatus_Call) Return(_a0 error) *MockJobUpdater_UpdateJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobUpdater_UpdateJobStatus_Call) RunAndReturn(run func(uuid.UUID, JobStatus, string, int) error) *MockJobUpdater_UpdateJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobUpdater creates a new instance of MockJobUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobUpdater {
	mock := &MockJobUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
