// Code generated by mockery v2.51.1. DO NOT EDIT.

package jobmanager

import mock "github.com/stretchr/testify/mock"

// MockjobGetter is an autogenerated mock type for the jobGetter type
type MockjobGetter struct {
	mock.Mock
}

type MockjobGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockjobGetter) EXPECT() *MockjobGetter_Expecter {
	return &MockjobGetter_Expecter{mock: &_m.Mock}
}

// getNotFinishedJobs provides a mock function with no fields
func (_m *MockjobGetter) getNotFinishedJobs() ([]Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getNotFinishedJobs")
	}

	var r0 []Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockjobGetter_getNotFinishedJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getNotFinishedJobs'
type MockjobGetter_getNotFinishedJobs_Call struct {
	*mock.Call
}

// getNotFinishedJobs is a helper method to define mock.On call
func (_e *MockjobGetter_Expecter) getNotFinishedJobs() *MockjobGetter_getNotFinishedJobs_Call {
	return &MockjobGetter_getNotFinishedJobs_Call{Call: _e.mock.On("getNotFinishedJobs")}
}

func (_c *MockjobGetter_getNotFinishedJobs_Call) Run(run func()) *MockjobGetter_getNotFinishedJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockjobGetter_getNotFinishedJobs_Call) Return(_a0 []Job, _a1 error) *MockjobGetter_getNotFinishedJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockjobGetter_getNotFinishedJobs_Call) RunAndReturn(run func() ([]Job, error)) *MockjobGetter_getNotFinishedJobs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockjobGetter creates a new instance of MockjobGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockjobGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockjobGetter {
	mock := &MockjobGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
