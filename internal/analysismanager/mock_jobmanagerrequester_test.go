// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	jobmanager "github.com/guardlight/server/internal/jobmanager"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockjobManagerRequester is an autogenerated mock type for the jobManagerRequester type
type MockjobManagerRequester struct {
	mock.Mock
}

type MockjobManagerRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockjobManagerRequester) EXPECT() *MockjobManagerRequester_Expecter {
	return &MockjobManagerRequester_Expecter{mock: &_m.Mock}
}

// CreateId provides a mock function with no fields
func (_m *MockjobManagerRequester) CreateId() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateId")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockjobManagerRequester_CreateId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateId'
type MockjobManagerRequester_CreateId_Call struct {
	*mock.Call
}

// CreateId is a helper method to define mock.On call
func (_e *MockjobManagerRequester_Expecter) CreateId() *MockjobManagerRequester_CreateId_Call {
	return &MockjobManagerRequester_CreateId_Call{Call: _e.mock.On("CreateId")}
}

func (_c *MockjobManagerRequester_CreateId_Call) Run(run func()) *MockjobManagerRequester_CreateId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockjobManagerRequester_CreateId_Call) Return(_a0 uuid.UUID) *MockjobManagerRequester_CreateId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockjobManagerRequester_CreateId_Call) RunAndReturn(run func() uuid.UUID) *MockjobManagerRequester_CreateId_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueJob provides a mock function with given fields: id, jType, groupKey, data
func (_m *MockjobManagerRequester) EnqueueJob(id uuid.UUID, jType jobmanager.JobType, groupKey string, data interface{}) error {
	ret := _m.Called(id, jType, groupKey, data)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, jobmanager.JobType, string, interface{}) error); ok {
		r0 = rf(id, jType, groupKey, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockjobManagerRequester_EnqueueJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueJob'
type MockjobManagerRequester_EnqueueJob_Call struct {
	*mock.Call
}

// EnqueueJob is a helper method to define mock.On call
//   - id uuid.UUID
//   - jType jobmanager.JobType
//   - groupKey string
//   - data interface{}
func (_e *MockjobManagerRequester_Expecter) EnqueueJob(id interface{}, jType interface{}, groupKey interface{}, data interface{}) *MockjobManagerRequester_EnqueueJob_Call {
	return &MockjobManagerRequester_EnqueueJob_Call{Call: _e.mock.On("EnqueueJob", id, jType, groupKey, data)}
}

func (_c *MockjobManagerRequester_EnqueueJob_Call) Run(run func(id uuid.UUID, jType jobmanager.JobType, groupKey string, data interface{})) *MockjobManagerRequester_EnqueueJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(jobmanager.JobType), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockjobManagerRequester_EnqueueJob_Call) Return(_a0 error) *MockjobManagerRequester_EnqueueJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockjobManagerRequester_EnqueueJob_Call) RunAndReturn(run func(uuid.UUID, jobmanager.JobType, string, interface{}) error) *MockjobManagerRequester_EnqueueJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockjobManagerRequester creates a new instance of MockjobManagerRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockjobManagerRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockjobManagerRequester {
	mock := &MockjobManagerRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
