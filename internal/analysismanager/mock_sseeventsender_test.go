// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	ssemanager "github.com/guardlight/server/internal/ssemanager"
	mock "github.com/stretchr/testify/mock"
)

// MocksseEventSender is an autogenerated mock type for the sseEventSender type
type MocksseEventSender struct {
	mock.Mock
}

type MocksseEventSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksseEventSender) EXPECT() *MocksseEventSender_Expecter {
	return &MocksseEventSender_Expecter{mock: &_m.Mock}
}

// SendEvent provides a mock function with given fields: userId, e
func (_m *MocksseEventSender) SendEvent(userId uuid.UUID, e ssemanager.SseEvent) {
	_m.Called(userId, e)
}

// MocksseEventSender_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type MocksseEventSender_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - userId uuid.UUID
//   - e ssemanager.SseEvent
func (_e *MocksseEventSender_Expecter) SendEvent(userId interface{}, e interface{}) *MocksseEventSender_SendEvent_Call {
	return &MocksseEventSender_SendEvent_Call{Call: _e.mock.On("SendEvent", userId, e)}
}

func (_c *MocksseEventSender_SendEvent_Call) Run(run func(userId uuid.UUID, e ssemanager.SseEvent)) *MocksseEventSender_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(ssemanager.SseEvent))
	})
	return _c
}

func (_c *MocksseEventSender_SendEvent_Call) Return() *MocksseEventSender_SendEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocksseEventSender_SendEvent_Call) RunAndReturn(run func(uuid.UUID, ssemanager.SseEvent)) *MocksseEventSender_SendEvent_Call {
	_c.Run(run)
	return _c
}

// NewMocksseEventSender creates a new instance of MocksseEventSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksseEventSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksseEventSender {
	mock := &MocksseEventSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
