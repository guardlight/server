// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// Mocksubsriber is an autogenerated mock type for the subsriber type
type Mocksubsriber struct {
	mock.Mock
}

type Mocksubsriber_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocksubsriber) EXPECT() *Mocksubsriber_Expecter {
	return &Mocksubsriber_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: subj, cb
func (_m *Mocksubsriber) Subscribe(subj string, cb nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(subj, cb)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *nats.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) (*nats.Subscription, error)); ok {
		return rf(subj, cb)
	}
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(subj, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = rf(subj, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mocksubsriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Mocksubsriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subj string
//   - cb nats.MsgHandler
func (_e *Mocksubsriber_Expecter) Subscribe(subj interface{}, cb interface{}) *Mocksubsriber_Subscribe_Call {
	return &Mocksubsriber_Subscribe_Call{Call: _e.mock.On("Subscribe", subj, cb)}
}

func (_c *Mocksubsriber_Subscribe_Call) Run(run func(subj string, cb nats.MsgHandler)) *Mocksubsriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(nats.MsgHandler))
	})
	return _c
}

func (_c *Mocksubsriber_Subscribe_Call) Return(_a0 *nats.Subscription, _a1 error) *Mocksubsriber_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mocksubsriber_Subscribe_Call) RunAndReturn(run func(string, nats.MsgHandler) (*nats.Subscription, error)) *Mocksubsriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksubsriber creates a new instance of Mocksubsriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksubsriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocksubsriber {
	mock := &Mocksubsriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
