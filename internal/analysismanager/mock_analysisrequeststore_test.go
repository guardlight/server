// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisRequestStore is an autogenerated mock type for the analysisRequestStore type
type MockanalysisRequestStore struct {
	mock.Mock
}

type MockanalysisRequestStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisRequestStore) EXPECT() *MockanalysisRequestStore_Expecter {
	return &MockanalysisRequestStore_Expecter{mock: &_m.Mock}
}

// createAnalysisRequest provides a mock function with given fields: analysisRequest
func (_m *MockanalysisRequestStore) createAnalysisRequest(analysisRequest *AnalysisRequest) error {
	ret := _m.Called(analysisRequest)

	if len(ret) == 0 {
		panic("no return value specified for createAnalysisRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*AnalysisRequest) error); ok {
		r0 = rf(analysisRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisRequestStore_createAnalysisRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createAnalysisRequest'
type MockanalysisRequestStore_createAnalysisRequest_Call struct {
	*mock.Call
}

// createAnalysisRequest is a helper method to define mock.On call
//   - analysisRequest *AnalysisRequest
func (_e *MockanalysisRequestStore_Expecter) createAnalysisRequest(analysisRequest interface{}) *MockanalysisRequestStore_createAnalysisRequest_Call {
	return &MockanalysisRequestStore_createAnalysisRequest_Call{Call: _e.mock.On("createAnalysisRequest", analysisRequest)}
}

func (_c *MockanalysisRequestStore_createAnalysisRequest_Call) Run(run func(analysisRequest *AnalysisRequest)) *MockanalysisRequestStore_createAnalysisRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*AnalysisRequest))
	})
	return _c
}

func (_c *MockanalysisRequestStore_createAnalysisRequest_Call) Return(_a0 error) *MockanalysisRequestStore_createAnalysisRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisRequestStore_createAnalysisRequest_Call) RunAndReturn(run func(*AnalysisRequest) error) *MockanalysisRequestStore_createAnalysisRequest_Call {
	_c.Call.Return(run)
	return _c
}

// getAnalysById provides a mock function with given fields: uid, aid
func (_m *MockanalysisRequestStore) getAnalysById(uid uuid.UUID, aid uuid.UUID) (AnalysisRequest, error) {
	ret := _m.Called(uid, aid)

	if len(ret) == 0 {
		panic("no return value specified for getAnalysById")
	}

	var r0 AnalysisRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (AnalysisRequest, error)); ok {
		return rf(uid, aid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) AnalysisRequest); ok {
		r0 = rf(uid, aid)
	} else {
		r0 = ret.Get(0).(AnalysisRequest)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(uid, aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisRequestStore_getAnalysById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAnalysById'
type MockanalysisRequestStore_getAnalysById_Call struct {
	*mock.Call
}

// getAnalysById is a helper method to define mock.On call
//   - uid uuid.UUID
//   - aid uuid.UUID
func (_e *MockanalysisRequestStore_Expecter) getAnalysById(uid interface{}, aid interface{}) *MockanalysisRequestStore_getAnalysById_Call {
	return &MockanalysisRequestStore_getAnalysById_Call{Call: _e.mock.On("getAnalysById", uid, aid)}
}

func (_c *MockanalysisRequestStore_getAnalysById_Call) Run(run func(uid uuid.UUID, aid uuid.UUID)) *MockanalysisRequestStore_getAnalysById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisRequestStore_getAnalysById_Call) Return(_a0 AnalysisRequest, _a1 error) *MockanalysisRequestStore_getAnalysById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisRequestStore_getAnalysById_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (AnalysisRequest, error)) *MockanalysisRequestStore_getAnalysById_Call {
	_c.Call.Return(run)
	return _c
}

// getAnalysesByUserId provides a mock function with given fields: id
func (_m *MockanalysisRequestStore) getAnalysesByUserId(id uuid.UUID) ([]AnalysisRequest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getAnalysesByUserId")
	}

	var r0 []AnalysisRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]AnalysisRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []AnalysisRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AnalysisRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisRequestStore_getAnalysesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAnalysesByUserId'
type MockanalysisRequestStore_getAnalysesByUserId_Call struct {
	*mock.Call
}

// getAnalysesByUserId is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockanalysisRequestStore_Expecter) getAnalysesByUserId(id interface{}) *MockanalysisRequestStore_getAnalysesByUserId_Call {
	return &MockanalysisRequestStore_getAnalysesByUserId_Call{Call: _e.mock.On("getAnalysesByUserId", id)}
}

func (_c *MockanalysisRequestStore_getAnalysesByUserId_Call) Run(run func(id uuid.UUID)) *MockanalysisRequestStore_getAnalysesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisRequestStore_getAnalysesByUserId_Call) Return(_a0 []AnalysisRequest, _a1 error) *MockanalysisRequestStore_getAnalysesByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisRequestStore_getAnalysesByUserId_Call) RunAndReturn(run func(uuid.UUID) ([]AnalysisRequest, error)) *MockanalysisRequestStore_getAnalysesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisRequestStore creates a new instance of MockanalysisRequestStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisRequestStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisRequestStore {
	mock := &MockanalysisRequestStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
