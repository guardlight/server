// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisUpdater is an autogenerated mock type for the analysisUpdater type
type MockanalysisUpdater struct {
	mock.Mock
}

type MockanalysisUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisUpdater) EXPECT() *MockanalysisUpdater_Expecter {
	return &MockanalysisUpdater_Expecter{mock: &_m.Mock}
}

// updateScore provides a mock function with given fields: id, score
func (_m *MockanalysisUpdater) updateScore(id uuid.UUID, score float32) error {
	ret := _m.Called(id, score)

	if len(ret) == 0 {
		panic("no return value specified for updateScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float32) error); ok {
		r0 = rf(id, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisUpdater_updateScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateScore'
type MockanalysisUpdater_updateScore_Call struct {
	*mock.Call
}

// updateScore is a helper method to define mock.On call
//   - id uuid.UUID
//   - score float32
func (_e *MockanalysisUpdater_Expecter) updateScore(id interface{}, score interface{}) *MockanalysisUpdater_updateScore_Call {
	return &MockanalysisUpdater_updateScore_Call{Call: _e.mock.On("updateScore", id, score)}
}

func (_c *MockanalysisUpdater_updateScore_Call) Run(run func(id uuid.UUID, score float32)) *MockanalysisUpdater_updateScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float32))
	})
	return _c
}

func (_c *MockanalysisUpdater_updateScore_Call) Return(_a0 error) *MockanalysisUpdater_updateScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisUpdater_updateScore_Call) RunAndReturn(run func(uuid.UUID, float32) error) *MockanalysisUpdater_updateScore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisUpdater creates a new instance of MockanalysisUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisUpdater {
	mock := &MockanalysisUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
