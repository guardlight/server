// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisStore is an autogenerated mock type for the analysisStore type
type MockanalysisStore struct {
	mock.Mock
}

type MockanalysisStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisStore) EXPECT() *MockanalysisStore_Expecter {
	return &MockanalysisStore_Expecter{mock: &_m.Mock}
}

// getAllAnalysisByAnalysisRecordId provides a mock function with given fields: id
func (_m *MockanalysisStore) getAllAnalysisByAnalysisRecordId(id uuid.UUID) ([]Analysis, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getAllAnalysisByAnalysisRecordId")
	}

	var r0 []Analysis
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]Analysis, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []Analysis); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Analysis)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAllAnalysisByAnalysisRecordId'
type MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call struct {
	*mock.Call
}

// getAllAnalysisByAnalysisRecordId is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockanalysisStore_Expecter) getAllAnalysisByAnalysisRecordId(id interface{}) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	return &MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call{Call: _e.mock.On("getAllAnalysisByAnalysisRecordId", id)}
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) Run(run func(id uuid.UUID)) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) Return(_a0 []Analysis, _a1 error) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) RunAndReturn(run func(uuid.UUID) ([]Analysis, error)) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Return(run)
	return _c
}

// updateProcessedText provides a mock function with given fields: ai, text
func (_m *MockanalysisStore) updateProcessedText(ai uuid.UUID, text string) error {
	ret := _m.Called(ai, text)

	if len(ret) == 0 {
		panic("no return value specified for updateProcessedText")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(ai, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisStore_updateProcessedText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateProcessedText'
type MockanalysisStore_updateProcessedText_Call struct {
	*mock.Call
}

// updateProcessedText is a helper method to define mock.On call
//   - ai uuid.UUID
//   - text string
func (_e *MockanalysisStore_Expecter) updateProcessedText(ai interface{}, text interface{}) *MockanalysisStore_updateProcessedText_Call {
	return &MockanalysisStore_updateProcessedText_Call{Call: _e.mock.On("updateProcessedText", ai, text)}
}

func (_c *MockanalysisStore_updateProcessedText_Call) Run(run func(ai uuid.UUID, text string)) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *MockanalysisStore_updateProcessedText_Call) Return(_a0 error) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisStore_updateProcessedText_Call) RunAndReturn(run func(uuid.UUID, string) error) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisStore creates a new instance of MockanalysisStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisStore {
	mock := &MockanalysisStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
