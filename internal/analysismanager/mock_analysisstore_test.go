// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisStore is an autogenerated mock type for the analysisStore type
type MockanalysisStore struct {
	mock.Mock
}

type MockanalysisStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisStore) EXPECT() *MockanalysisStore_Expecter {
	return &MockanalysisStore_Expecter{mock: &_m.Mock}
}

// getAllAnalysisByAnalysisRecordId provides a mock function with given fields: id
func (_m *MockanalysisStore) getAllAnalysisByAnalysisRecordId(id uuid.UUID) ([]Analysis, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getAllAnalysisByAnalysisRecordId")
	}

	var r0 []Analysis
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]Analysis, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []Analysis); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Analysis)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAllAnalysisByAnalysisRecordId'
type MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call struct {
	*mock.Call
}

// getAllAnalysisByAnalysisRecordId is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockanalysisStore_Expecter) getAllAnalysisByAnalysisRecordId(id interface{}) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	return &MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call{Call: _e.mock.On("getAllAnalysisByAnalysisRecordId", id)}
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) Run(run func(id uuid.UUID)) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) Return(_a0 []Analysis, _a1 error) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call) RunAndReturn(run func(uuid.UUID) ([]Analysis, error)) *MockanalysisStore_getAllAnalysisByAnalysisRecordId_Call {
	_c.Call.Return(run)
	return _c
}

// getAllAnalysisById provides a mock function with given fields: aid
func (_m *MockanalysisStore) getAllAnalysisById(aid uuid.UUID) (Analysis, error) {
	ret := _m.Called(aid)

	if len(ret) == 0 {
		panic("no return value specified for getAllAnalysisById")
	}

	var r0 Analysis
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (Analysis, error)); ok {
		return rf(aid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) Analysis); ok {
		r0 = rf(aid)
	} else {
		r0 = ret.Get(0).(Analysis)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_getAllAnalysisById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAllAnalysisById'
type MockanalysisStore_getAllAnalysisById_Call struct {
	*mock.Call
}

// getAllAnalysisById is a helper method to define mock.On call
//   - aid uuid.UUID
func (_e *MockanalysisStore_Expecter) getAllAnalysisById(aid interface{}) *MockanalysisStore_getAllAnalysisById_Call {
	return &MockanalysisStore_getAllAnalysisById_Call{Call: _e.mock.On("getAllAnalysisById", aid)}
}

func (_c *MockanalysisStore_getAllAnalysisById_Call) Run(run func(aid uuid.UUID)) *MockanalysisStore_getAllAnalysisById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisById_Call) Return(_a0 Analysis, _a1 error) *MockanalysisStore_getAllAnalysisById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_getAllAnalysisById_Call) RunAndReturn(run func(uuid.UUID) (Analysis, error)) *MockanalysisStore_getAllAnalysisById_Call {
	_c.Call.Return(run)
	return _c
}

// getReporterKeyByAnalysisId provides a mock function with given fields: aid
func (_m *MockanalysisStore) getReporterKeyByAnalysisId(aid uuid.UUID) (string, error) {
	ret := _m.Called(aid)

	if len(ret) == 0 {
		panic("no return value specified for getReporterKeyByAnalysisId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return rf(aid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(aid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_getReporterKeyByAnalysisId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getReporterKeyByAnalysisId'
type MockanalysisStore_getReporterKeyByAnalysisId_Call struct {
	*mock.Call
}

// getReporterKeyByAnalysisId is a helper method to define mock.On call
//   - aid uuid.UUID
func (_e *MockanalysisStore_Expecter) getReporterKeyByAnalysisId(aid interface{}) *MockanalysisStore_getReporterKeyByAnalysisId_Call {
	return &MockanalysisStore_getReporterKeyByAnalysisId_Call{Call: _e.mock.On("getReporterKeyByAnalysisId", aid)}
}

func (_c *MockanalysisStore_getReporterKeyByAnalysisId_Call) Run(run func(aid uuid.UUID)) *MockanalysisStore_getReporterKeyByAnalysisId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisStore_getReporterKeyByAnalysisId_Call) Return(_a0 string, _a1 error) *MockanalysisStore_getReporterKeyByAnalysisId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_getReporterKeyByAnalysisId_Call) RunAndReturn(run func(uuid.UUID) (string, error)) *MockanalysisStore_getReporterKeyByAnalysisId_Call {
	_c.Call.Return(run)
	return _c
}

// getUserIdByAnalysisId provides a mock function with given fields: analysisId
func (_m *MockanalysisStore) getUserIdByAnalysisId(analysisId uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(analysisId)

	if len(ret) == 0 {
		panic("no return value specified for getUserIdByAnalysisId")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (uuid.UUID, error)); ok {
		return rf(analysisId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) uuid.UUID); ok {
		r0 = rf(analysisId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(analysisId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_getUserIdByAnalysisId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getUserIdByAnalysisId'
type MockanalysisStore_getUserIdByAnalysisId_Call struct {
	*mock.Call
}

// getUserIdByAnalysisId is a helper method to define mock.On call
//   - analysisId uuid.UUID
func (_e *MockanalysisStore_Expecter) getUserIdByAnalysisId(analysisId interface{}) *MockanalysisStore_getUserIdByAnalysisId_Call {
	return &MockanalysisStore_getUserIdByAnalysisId_Call{Call: _e.mock.On("getUserIdByAnalysisId", analysisId)}
}

func (_c *MockanalysisStore_getUserIdByAnalysisId_Call) Run(run func(analysisId uuid.UUID)) *MockanalysisStore_getUserIdByAnalysisId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisStore_getUserIdByAnalysisId_Call) Return(_a0 uuid.UUID, _a1 error) *MockanalysisStore_getUserIdByAnalysisId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_getUserIdByAnalysisId_Call) RunAndReturn(run func(uuid.UUID) (uuid.UUID, error)) *MockanalysisStore_getUserIdByAnalysisId_Call {
	_c.Call.Return(run)
	return _c
}

// updateAllAnalysesStatusByAnalysisRequestId provides a mock function with given fields: arid, status
func (_m *MockanalysisStore) updateAllAnalysesStatusByAnalysisRequestId(arid uuid.UUID, status AnalysisStatus) error {
	ret := _m.Called(arid, status)

	if len(ret) == 0 {
		panic("no return value specified for updateAllAnalysesStatusByAnalysisRequestId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, AnalysisStatus) error); ok {
		r0 = rf(arid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateAllAnalysesStatusByAnalysisRequestId'
type MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call struct {
	*mock.Call
}

// updateAllAnalysesStatusByAnalysisRequestId is a helper method to define mock.On call
//   - arid uuid.UUID
//   - status AnalysisStatus
func (_e *MockanalysisStore_Expecter) updateAllAnalysesStatusByAnalysisRequestId(arid interface{}, status interface{}) *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call {
	return &MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call{Call: _e.mock.On("updateAllAnalysesStatusByAnalysisRequestId", arid, status)}
}

func (_c *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call) Run(run func(arid uuid.UUID, status AnalysisStatus)) *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(AnalysisStatus))
	})
	return _c
}

func (_c *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call) Return(_a0 error) *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call) RunAndReturn(run func(uuid.UUID, AnalysisStatus) error) *MockanalysisStore_updateAllAnalysesStatusByAnalysisRequestId_Call {
	_c.Call.Return(run)
	return _c
}

// updateAnalysisJobProgress provides a mock function with given fields: aid, jid, status, content
func (_m *MockanalysisStore) updateAnalysisJobProgress(aid uuid.UUID, jid uuid.UUID, status AnalysisStatus, content []string) (bool, error) {
	ret := _m.Called(aid, jid, status, content)

	if len(ret) == 0 {
		panic("no return value specified for updateAnalysisJobProgress")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, AnalysisStatus, []string) (bool, error)); ok {
		return rf(aid, jid, status, content)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, AnalysisStatus, []string) bool); ok {
		r0 = rf(aid, jid, status, content)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, AnalysisStatus, []string) error); ok {
		r1 = rf(aid, jid, status, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisStore_updateAnalysisJobProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateAnalysisJobProgress'
type MockanalysisStore_updateAnalysisJobProgress_Call struct {
	*mock.Call
}

// updateAnalysisJobProgress is a helper method to define mock.On call
//   - aid uuid.UUID
//   - jid uuid.UUID
//   - status AnalysisStatus
//   - content []string
func (_e *MockanalysisStore_Expecter) updateAnalysisJobProgress(aid interface{}, jid interface{}, status interface{}, content interface{}) *MockanalysisStore_updateAnalysisJobProgress_Call {
	return &MockanalysisStore_updateAnalysisJobProgress_Call{Call: _e.mock.On("updateAnalysisJobProgress", aid, jid, status, content)}
}

func (_c *MockanalysisStore_updateAnalysisJobProgress_Call) Run(run func(aid uuid.UUID, jid uuid.UUID, status AnalysisStatus, content []string)) *MockanalysisStore_updateAnalysisJobProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(AnalysisStatus), args[3].([]string))
	})
	return _c
}

func (_c *MockanalysisStore_updateAnalysisJobProgress_Call) Return(_a0 bool, _a1 error) *MockanalysisStore_updateAnalysisJobProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisStore_updateAnalysisJobProgress_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, AnalysisStatus, []string) (bool, error)) *MockanalysisStore_updateAnalysisJobProgress_Call {
	_c.Call.Return(run)
	return _c
}

// updateAnalysisJobs provides a mock function with given fields: ai, jbs
func (_m *MockanalysisStore) updateAnalysisJobs(ai uuid.UUID, jbs []SingleJobProgress) error {
	ret := _m.Called(ai, jbs)

	if len(ret) == 0 {
		panic("no return value specified for updateAnalysisJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []SingleJobProgress) error); ok {
		r0 = rf(ai, jbs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisStore_updateAnalysisJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateAnalysisJobs'
type MockanalysisStore_updateAnalysisJobs_Call struct {
	*mock.Call
}

// updateAnalysisJobs is a helper method to define mock.On call
//   - ai uuid.UUID
//   - jbs []SingleJobProgress
func (_e *MockanalysisStore_Expecter) updateAnalysisJobs(ai interface{}, jbs interface{}) *MockanalysisStore_updateAnalysisJobs_Call {
	return &MockanalysisStore_updateAnalysisJobs_Call{Call: _e.mock.On("updateAnalysisJobs", ai, jbs)}
}

func (_c *MockanalysisStore_updateAnalysisJobs_Call) Run(run func(ai uuid.UUID, jbs []SingleJobProgress)) *MockanalysisStore_updateAnalysisJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].([]SingleJobProgress))
	})
	return _c
}

func (_c *MockanalysisStore_updateAnalysisJobs_Call) Return(_a0 error) *MockanalysisStore_updateAnalysisJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisStore_updateAnalysisJobs_Call) RunAndReturn(run func(uuid.UUID, []SingleJobProgress) error) *MockanalysisStore_updateAnalysisJobs_Call {
	_c.Call.Return(run)
	return _c
}

// updateProcessedText provides a mock function with given fields: ai, text
func (_m *MockanalysisStore) updateProcessedText(ai uuid.UUID, text string) error {
	ret := _m.Called(ai, text)

	if len(ret) == 0 {
		panic("no return value specified for updateProcessedText")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(ai, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisStore_updateProcessedText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateProcessedText'
type MockanalysisStore_updateProcessedText_Call struct {
	*mock.Call
}

// updateProcessedText is a helper method to define mock.On call
//   - ai uuid.UUID
//   - text string
func (_e *MockanalysisStore_Expecter) updateProcessedText(ai interface{}, text interface{}) *MockanalysisStore_updateProcessedText_Call {
	return &MockanalysisStore_updateProcessedText_Call{Call: _e.mock.On("updateProcessedText", ai, text)}
}

func (_c *MockanalysisStore_updateProcessedText_Call) Run(run func(ai uuid.UUID, text string)) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *MockanalysisStore_updateProcessedText_Call) Return(_a0 error) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisStore_updateProcessedText_Call) RunAndReturn(run func(uuid.UUID, string) error) *MockanalysisStore_updateProcessedText_Call {
	_c.Call.Return(run)
	return _c
}

// updateScore provides a mock function with given fields: analysisId, score
func (_m *MockanalysisStore) updateScore(analysisId uuid.UUID, score float32) error {
	ret := _m.Called(analysisId, score)

	if len(ret) == 0 {
		panic("no return value specified for updateScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float32) error); ok {
		r0 = rf(analysisId, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanalysisStore_updateScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateScore'
type MockanalysisStore_updateScore_Call struct {
	*mock.Call
}

// updateScore is a helper method to define mock.On call
//   - analysisId uuid.UUID
//   - score float32
func (_e *MockanalysisStore_Expecter) updateScore(analysisId interface{}, score interface{}) *MockanalysisStore_updateScore_Call {
	return &MockanalysisStore_updateScore_Call{Call: _e.mock.On("updateScore", analysisId, score)}
}

func (_c *MockanalysisStore_updateScore_Call) Run(run func(analysisId uuid.UUID, score float32)) *MockanalysisStore_updateScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float32))
	})
	return _c
}

func (_c *MockanalysisStore_updateScore_Call) Return(_a0 error) *MockanalysisStore_updateScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanalysisStore_updateScore_Call) RunAndReturn(run func(uuid.UUID, float32) error) *MockanalysisStore_updateScore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisStore creates a new instance of MockanalysisStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisStore {
	mock := &MockanalysisStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
