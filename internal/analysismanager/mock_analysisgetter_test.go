// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisGetter is an autogenerated mock type for the analysisGetter type
type MockanalysisGetter struct {
	mock.Mock
}

type MockanalysisGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisGetter) EXPECT() *MockanalysisGetter_Expecter {
	return &MockanalysisGetter_Expecter{mock: &_m.Mock}
}

// getAnalysesByAnalysisIdAndUserId provides a mock function with given fields: id, arid
func (_m *MockanalysisGetter) getAnalysesByAnalysisIdAndUserId(id uuid.UUID, arid uuid.UUID) (AnalysisRequest, error) {
	ret := _m.Called(id, arid)

	if len(ret) == 0 {
		panic("no return value specified for getAnalysesByAnalysisIdAndUserId")
	}

	var r0 AnalysisRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (AnalysisRequest, error)); ok {
		return rf(id, arid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) AnalysisRequest); ok {
		r0 = rf(id, arid)
	} else {
		r0 = ret.Get(0).(AnalysisRequest)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, arid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAnalysesByAnalysisIdAndUserId'
type MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call struct {
	*mock.Call
}

// getAnalysesByAnalysisIdAndUserId is a helper method to define mock.On call
//   - id uuid.UUID
//   - arid uuid.UUID
func (_e *MockanalysisGetter_Expecter) getAnalysesByAnalysisIdAndUserId(id interface{}, arid interface{}) *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call {
	return &MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call{Call: _e.mock.On("getAnalysesByAnalysisIdAndUserId", id, arid)}
}

func (_c *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call) Run(run func(id uuid.UUID, arid uuid.UUID)) *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call) Return(_a0 AnalysisRequest, _a1 error) *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (AnalysisRequest, error)) *MockanalysisGetter_getAnalysesByAnalysisIdAndUserId_Call {
	_c.Call.Return(run)
	return _c
}

// getAnalysesByUserId provides a mock function with given fields: id, pag, catType, catCat, query, sc
func (_m *MockanalysisGetter) getAnalysesByUserId(id uuid.UUID, pag Pagination, catType string, catCat string, query string, sc string) (AnalysisResultPaginated, error) {
	ret := _m.Called(id, pag, catType, catCat, query, sc)

	if len(ret) == 0 {
		panic("no return value specified for getAnalysesByUserId")
	}

	var r0 AnalysisResultPaginated
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, Pagination, string, string, string, string) (AnalysisResultPaginated, error)); ok {
		return rf(id, pag, catType, catCat, query, sc)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, Pagination, string, string, string, string) AnalysisResultPaginated); ok {
		r0 = rf(id, pag, catType, catCat, query, sc)
	} else {
		r0 = ret.Get(0).(AnalysisResultPaginated)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, Pagination, string, string, string, string) error); ok {
		r1 = rf(id, pag, catType, catCat, query, sc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisGetter_getAnalysesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAnalysesByUserId'
type MockanalysisGetter_getAnalysesByUserId_Call struct {
	*mock.Call
}

// getAnalysesByUserId is a helper method to define mock.On call
//   - id uuid.UUID
//   - pag Pagination
//   - catType string
//   - catCat string
//   - query string
//   - sc string
func (_e *MockanalysisGetter_Expecter) getAnalysesByUserId(id interface{}, pag interface{}, catType interface{}, catCat interface{}, query interface{}, sc interface{}) *MockanalysisGetter_getAnalysesByUserId_Call {
	return &MockanalysisGetter_getAnalysesByUserId_Call{Call: _e.mock.On("getAnalysesByUserId", id, pag, catType, catCat, query, sc)}
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) Run(run func(id uuid.UUID, pag Pagination, catType string, catCat string, query string, sc string)) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(Pagination), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) Return(_a0 AnalysisResultPaginated, _a1 error) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) RunAndReturn(run func(uuid.UUID, Pagination, string, string, string, string) (AnalysisResultPaginated, error)) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisGetter creates a new instance of MockanalysisGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisGetter {
	mock := &MockanalysisGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
