// Code generated by mockery v2.51.1. DO NOT EDIT.

package analysismanager

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockanalysisGetter is an autogenerated mock type for the analysisGetter type
type MockanalysisGetter struct {
	mock.Mock
}

type MockanalysisGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanalysisGetter) EXPECT() *MockanalysisGetter_Expecter {
	return &MockanalysisGetter_Expecter{mock: &_m.Mock}
}

// getAnalysesByUserId provides a mock function with given fields: id
func (_m *MockanalysisGetter) getAnalysesByUserId(id uuid.UUID) ([]AnalysisRequest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getAnalysesByUserId")
	}

	var r0 []AnalysisRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]AnalysisRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []AnalysisRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AnalysisRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockanalysisGetter_getAnalysesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAnalysesByUserId'
type MockanalysisGetter_getAnalysesByUserId_Call struct {
	*mock.Call
}

// getAnalysesByUserId is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockanalysisGetter_Expecter) getAnalysesByUserId(id interface{}) *MockanalysisGetter_getAnalysesByUserId_Call {
	return &MockanalysisGetter_getAnalysesByUserId_Call{Call: _e.mock.On("getAnalysesByUserId", id)}
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) Run(run func(id uuid.UUID)) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) Return(_a0 []AnalysisRequest, _a1 error) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockanalysisGetter_getAnalysesByUserId_Call) RunAndReturn(run func(uuid.UUID) ([]AnalysisRequest, error)) *MockanalysisGetter_getAnalysesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanalysisGetter creates a new instance of MockanalysisGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanalysisGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanalysisGetter {
	mock := &MockanalysisGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
