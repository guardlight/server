// Code generated by mockery v2.51.1. DO NOT EDIT.

package orchestrator

import mock "github.com/stretchr/testify/mock"

// MocknatsSender is an autogenerated mock type for the natsSender type
type MocknatsSender struct {
	mock.Mock
}

type MocknatsSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MocknatsSender) EXPECT() *MocknatsSender_Expecter {
	return &MocknatsSender_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: topic, data
func (_m *MocknatsSender) Publish(topic string, data interface{}) error {
	ret := _m.Called(topic, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocknatsSender_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MocknatsSender_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - data interface{}
func (_e *MocknatsSender_Expecter) Publish(topic interface{}, data interface{}) *MocknatsSender_Publish_Call {
	return &MocknatsSender_Publish_Call{Call: _e.mock.On("Publish", topic, data)}
}

func (_c *MocknatsSender_Publish_Call) Run(run func(topic string, data interface{})) *MocknatsSender_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MocknatsSender_Publish_Call) Return(_a0 error) *MocknatsSender_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocknatsSender_Publish_Call) RunAndReturn(run func(string, interface{}) error) *MocknatsSender_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocknatsSender creates a new instance of MocknatsSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknatsSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocknatsSender {
	mock := &MocknatsSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
