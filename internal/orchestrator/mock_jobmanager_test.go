// Code generated by mockery v2.51.1. DO NOT EDIT.

package orchestrator

import (
	jobmanager "github.com/guardlight/server/internal/jobmanager"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockjobManager is an autogenerated mock type for the jobManager type
type MockjobManager struct {
	mock.Mock
}

type MockjobManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockjobManager) EXPECT() *MockjobManager_Expecter {
	return &MockjobManager_Expecter{mock: &_m.Mock}
}

// GetAllNonFinishedJobs provides a mock function with no fields
func (_m *MockjobManager) GetAllNonFinishedJobs() ([]jobmanager.Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllNonFinishedJobs")
	}

	var r0 []jobmanager.Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]jobmanager.Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []jobmanager.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jobmanager.Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockjobManager_GetAllNonFinishedJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNonFinishedJobs'
type MockjobManager_GetAllNonFinishedJobs_Call struct {
	*mock.Call
}

// GetAllNonFinishedJobs is a helper method to define mock.On call
func (_e *MockjobManager_Expecter) GetAllNonFinishedJobs() *MockjobManager_GetAllNonFinishedJobs_Call {
	return &MockjobManager_GetAllNonFinishedJobs_Call{Call: _e.mock.On("GetAllNonFinishedJobs")}
}

func (_c *MockjobManager_GetAllNonFinishedJobs_Call) Run(run func()) *MockjobManager_GetAllNonFinishedJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockjobManager_GetAllNonFinishedJobs_Call) Return(_a0 []jobmanager.Job, _a1 error) *MockjobManager_GetAllNonFinishedJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockjobManager_GetAllNonFinishedJobs_Call) RunAndReturn(run func() ([]jobmanager.Job, error)) *MockjobManager_GetAllNonFinishedJobs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobStatus provides a mock function with given fields: id, s, sd, rc
func (_m *MockjobManager) UpdateJobStatus(id uuid.UUID, s jobmanager.JobStatus, sd string, rc int) error {
	ret := _m.Called(id, s, sd, rc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, jobmanager.JobStatus, string, int) error); ok {
		r0 = rf(id, s, sd, rc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockjobManager_UpdateJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobStatus'
type MockjobManager_UpdateJobStatus_Call struct {
	*mock.Call
}

// UpdateJobStatus is a helper method to define mock.On call
//   - id uuid.UUID
//   - s jobmanager.JobStatus
//   - sd string
//   - rc int
func (_e *MockjobManager_Expecter) UpdateJobStatus(id interface{}, s interface{}, sd interface{}, rc interface{}) *MockjobManager_UpdateJobStatus_Call {
	return &MockjobManager_UpdateJobStatus_Call{Call: _e.mock.On("UpdateJobStatus", id, s, sd, rc)}
}

func (_c *MockjobManager_UpdateJobStatus_Call) Run(run func(id uuid.UUID, s jobmanager.JobStatus, sd string, rc int)) *MockjobManager_UpdateJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(jobmanager.JobStatus), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockjobManager_UpdateJobStatus_Call) Return(_a0 error) *MockjobManager_UpdateJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockjobManager_UpdateJobStatus_Call) RunAndReturn(run func(uuid.UUID, jobmanager.JobStatus, string, int) error) *MockjobManager_UpdateJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockjobManager creates a new instance of MockjobManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockjobManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockjobManager {
	mock := &MockjobManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
